[project]
name = "xloft"
version = "0.5.2"
description = "(XLOFT) X-Library of tools"
readme = "README.md"
authors = [{ name = "kebasyaty", email = "kebasyaty@gmail.com" }]
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.12,<4.0"
keywords = ["collection", "tools", "xloft", "namedtuple"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    # "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Utilities",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
dependencies = []

[project.urls]
Homepage = "https://github.com/kebasyaty/xloft"
Repository = "https://github.com/kebasyaty/xloft"
Source = "https://github.com/kebasyaty/xloft"
"Bug Tracker" = "https://github.com/kebasyaty/xloft/issues"
Changelog = "https://github.com/kebasyaty/xloft/blob/v0/CHANGELOG.md"

[tool.uv]
package = true
default-groups = ["dev", "lint", "test", "docs", "types"]
compile-bytecode = true
check-url = "https://pypi.org/simple"

[tool.uv.build-backend]
module-root = "src"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = []
lint = ["mypy>=1.17.1", "pre-commit>=4.3.0", "ruff>=0.12.7"]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-httpx>=0.35.0",
    "pytest-mock>=3.14.1",
]
docs = [
    "mike>=2.1.3",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    "mkdocstrings[python]>=0.30.0",
    "pygments>=2.19.2",
    "pymdown-extensions>=10.16.1",
]
types = []

[tool.ruff]
fix = true
line-length = 120
indent-width = 4
required-version = ">=0.7.11"
src = ["src", "tests"]
include = ["src/**/*.py", "tests/**/*.py"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".github",
    "assets",
    "docs",
    "site",
]

[tool.ruff.lint]
preview = true
select = [
    "D",     # pydocstyle
    "I",     # isort
    "E",     # flake8-errors
    "W",     # flake8-warnings
    "F",     # flake8-pyflakes
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "T20",   # flake8-print
    "T10",   # flake8-debugger
    "PT",    # flake8-pytest-style
    "RUF",   # Ruff-specific
    "DTZ",   # flake8-datetimez
    "ERA",   # eradicate
    "FURB",  # refurb
    "ARG",   # flake8-unused-arguments
    "EM",    # flake8-errmsg
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PTH",   # flake8-use-pathlib
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "EXE",   # flake8-executable
    "ASYNC", # flake8-async
]
ignore = [
    "D417",   # Missing argument descriptions in the docstring
    "D206",   # Docstring should be indented with spaces, not tabs
    "C408",   # Unnecessary `dict` call (rewrite as a literal)
    "RUF001", # ambiguous-unicode-character-docstring
    "RUF002", # ambiguous-unicode-character-docstring
    "RUF003", # ambiguous-unicode-character-docstring
    "RUF022", # unsorted-dunder-all
    "E722",   # Do not use bare except
    "S110",   # try-except-pass detected, consider logging the exception
    "S101",   # Use of `assert` detected
    "PLR",    # Design related pylint codes
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
]
fixable = ["I"]
unfixable = [
    "RUF100", # Unused noqa
    "T20",    # Removes print statements
    "F841",   # Removes unused variables
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?)|dummy.*)$"

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 120
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
strict = true
show_error_codes = true
pretty = true
files = ["src/**/*.py", "tests/**/*.py"]
disable_error_code = [
    "type-arg",
    "no-any-return",
    "attr-defined",
    "index",
    "operator",
]

[[tool.mypy.overrides]]
module = ["tests.*"]
disable_error_code = [
    "arg-type",
    "no-untyped-def",
    "no-untyped-call",
    "func-returns-value",
    "union-attr",
    "import-not-found",
    "import-untyped",
    "no-untyped-def",
    "misc",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
